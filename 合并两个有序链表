class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
       ListNode head = null;
       if (l1 == null) {
           return l2;
       }
       if (l2 == null) {
           return l1;
       }
       if (l1.val <= l2.val) {//如果l1节点的值小于等于l2节点的值，由于这两个链表是有序的，所以合并后最小的节点(head节点)就是它们两者中的小者
           head = l1;
           l1 = l1.next;//后移，用于继续比较选出接下来最小的节点
       }else {
           head = l2;
           l2 = l2.next;
       }
        ListNode temp = head;
       //接着比较两个链表，对两个链表中的最小的节点进行比较选出最小的，也就是合并后的第二小的节点，循环知道有一个链表为空
       while (l1 != null && l2 != null) {
           if (l1.val <= l2.val) {
              temp.next = l1;
               l1 = l1.next;
           }else {
               temp.next = l2;
               l2 = l2.next;
           }
           temp = temp.next;
       }
       if (l1 == null) {
           temp.next = l2;
       }
       if (l2 == null) {
           temp.next = l1;
       }
        return head;
    }

}
